library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
usethis::use_vignette("intro")
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
usethis::use_vignette("intro")
usethis::use_vignette("intro")
usethis::use_vignette("homework")
devtools::build_vignettes()
last.warning
.Last.error
set.seed(1234)
index <- 5000:5500
sd <- 1
X <- matrix(0, nrow=k, ncol=n)
set.seed(1234)
Gelman.Rubin <- function(psi) {
# psi[i,j] is the statistic psi(X[i,1:j])
# for chain in i-th row of X
psi <- as.matrix(psi)
n <- ncol(psi)
k <- nrow(psi)
psi.means <- rowMeans(psi)     #row means
B <- n * var(psi.means)        #between variance est.
psi.w <- apply(psi, 1, "var")  #within variances
W <- mean(psi.w)               #within est.
v.hat <- W*(n-1)/n + (B/n)     #upper variance est.
r.hat <- v.hat / W             #G-R statistic
return(r.hat)
}
laplace <- function(x1, sd, m){
f <- function(x){
1 / 2 * exp(- abs(x))
}
x <- numeric(m)
x[1] <- x1
k <- 0
u <- runif(m)
for (i in 2:m) {
xt <- x[i-1]
y <- rnorm(1, xt ,sd)
num <- f(y) * dnorm(xt, y, sd)
den <- f(xt) * dnorm(y, xt, sd)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     #y is rejected
}
}
print(paste('sd=', sd, ', x1=', x1, ', acceptance rates=', 1 - k/m))
return(x)
}
k <- 4          #number of chains to generate
n <- 15000      #length of chains
b <- 1000       #burn-in length
#choose overdispersed initial values
x0 <- c(-10, -5, 5, 10)
set.seed(1234)
index <- 5000:5500
sd <- 1
X <- matrix(0, nrow=k, ncol=n)
for (i in 1:k){
X[i, ] <- laplace(x0[i], sd, n)
}
par(mfrow=c(2,2))
for (i in 1:k){
plot(index,X[i, index],type = 'l',ylab = paste("x1 = ", x0[i], sep = ''))
}
#compute diagnostic statistics
psi <- matrix(0, nrow=k, ncol=n)
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)){
psi[i,] <- psi[i,] / (1:ncol(psi))
}
#plot psi for the four chains
par(mfrow=c(1,1))
for (i in 1:k){
if(i==1){
plot((b+1):n,psi[i, (b+1):n],ylim=c(-0.2,0.2), type="l", xlab='Index', ylab=bquote(phi))
}else{
lines(psi[i, (b+1):n], col=i)
}
}
legend('topright', c('x1=-10', 'x1=-5', 'x1=5', 'x1=10'), lty = 1, col = 1:4)
rhat <- rep(0, n)
for (j in (b+1):n){
rhat[j] <- Gelman.Rubin(psi[,1:j])
}
plot(rhat[(b+1):n], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
set.seed(1234)
index <- 5000:5500
sd <- 2
X <- matrix(0, nrow=k, ncol=n)
for (i in 1:k){
X[i, ] <- laplace(x0[i], sd, n)
}
par(mfrow=c(2,2))
for (i in 1:k){
plot(index,X[i, index],type = 'l',ylab = paste("x1 = ", x0[i], sep = ''))
}
#compute diagnostic statistics
psi <- matrix(0, nrow=k, ncol=n)
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)){
psi[i,] <- psi[i,] / (1:ncol(psi))
}
#plot psi for the four chains
par(mfrow=c(1,1))
for (i in 1:k){
if(i==1){
plot((b+1):n,psi[i, (b+1):n],ylim=c(-0.2,0.2), type="l", xlab='Index', ylab=bquote(phi))
}else{
lines(psi[i, (b+1):n], col=i)
}
}
legend('topright', c('x1=-10', 'x1=-5', 'x1=5', 'x1=10'), lty = 1, col = 1:4)
rhat <- rep(0, n)
for (j in (b+1):n){
rhat[j] <- Gelman.Rubin(psi[,1:j])
}
plot(rhat[(b+1):n], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
devtools::build_vignettes()
devtools::build_vignettes()
u <- c(11,8,27,13,16,0,23,10,24,2)
v <- c(12,9,28,14,17,1,24,11,25,3)
mlogL <- function(lambda=1){
-sum(log(exp(-lambda*u)-exp(-lambda*v)))
}
library(stats4)
fit <- mle(mlogL)
fit@coef
score_function <- function(lambda){
sum((u*exp(-lambda*u)-v*exp(-lambda*v))/(exp(-lambda*u)-exp(-lambda*v)))
}
# solve directly
solution <- uniroot(score_function,c(0,10))
solution$root
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages("D:/R/StatComp22009_1.0.tar.gz", repos = NULL, type = "source")
?dcovR
data("Eckerle4")
dcor(Eckerle4$wavelength,Eckerle4$transmitance)
pvalue(a,b,dcov,repl = 999)
p_value(a,b,dcov,repl = 999)
p_value(Eckerle4$wavelength,Eckerle4$transmitance,dcov,repl = 999)
library(boot)
p_value(Eckerle4$wavelength,Eckerle4$transmitance,dcov,repl = 999)
p_value(Eckerle4$wavelength,Eckerle4$transmitance,dcovR,repl = 999)
library(boot)
data(Eckerle4)
attach()
library(boot)
data(Eckerle4)
#attach()
plot(Eckerle4)
dcov_C <- dcovC(Eckerle4$wavelength, Eckerle4$transmitance)
p_value(Eckerle4$wavelength,Eckerle4$transmitance,dcovR,repl = 999)
data("Eckerle4")
attach(Eckerle4)
library(StatComp)
library(StatComp22009)
library(boot)
data(Eckerle4)
attach()
library(boot)
data(Eckerle4)
attach(Eckerle4)
plot(Eckerle4)
dcov_C <- dcovC(Eckerle4$wavelength, Eckerle4$transmitance)
dcovR<-function(x,y){
a <- as.matrix(dist(x))
b <- as.matrix(dist(y))
aa <- a
bb <- b
n <- ncol(a)
a1 <- rowMeans(a)
a2 <- colMeans(a)
b1 <- rowMeans(b)
b2 <- colMeans(b)
for (i in 1:n){
for (j in 1:n){
aa[i,j] <- a1[i]+a2[j]
bb[i,j] <- b1[i]+b2[j]
}
}
A <- a + mean(a) - aa
B <- b + mean(b) - bb
return(sqrt(mean(A*B)))
}
double dcovC(NumericVector x, NumericVector y) {
library(boot)
data(Eckerle4)
attach(Eckerle4)
plot(Eckerle4)
#dcov_C <- dcovC(Eckerle4$wavelength, Eckerle4$transmitance)
dcov_R <- dcovR(Eckerle4$wavelength, Eckerle4$transmitance)
dcov_R
dcov_C
library(boot)
data(Eckerle4)
attach(Eckerle4)
plot(Eckerle4)
#dcov_C <- dcovC(Eckerle4$wavelength, Eckerle4$transmitance)
dcov_R <- dcovR(Eckerle4$wavelength, Eckerle4$transmitance)
dcov_R
#dcov_C
a <- Eckerle4$wavelength
b <- Eckerle4$transmitance
wave_tran <- data.frame(cov = c(dcor(a, b), cor(a, b, method = "pearson"), cor(a, b, method = "spearman")), pvalue = c(p_value(a, b, dcovR, repl = 999),p_value(a, b, cov, repl = 999, Method = "pearson"), p_value(a, b, cov, repl = 999, Method = "spearman")))
rownames(wave_tran) <- c('distance','pearson','spearman')
wave_tran
